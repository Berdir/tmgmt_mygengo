<?php

/**
 * @file
 * Test cases for the MyGengo translator module.
 */

/**
 * Basic tests for the MyGengo translator.
 */
class TMGMTMyGengoTestCase extends TMGMTBaseTestCase {

  /**
   * @var TMGMTTranslator $translator
   */
  protected $translator;

  /**
   * Implements getInfo().
   */
  static function getInfo() {
    return array(
      'name' => t('MyGengo Translator tests'),
      'description' => t('Tests the MyGengo translator plugin integration.'),
      'group' => t('Translation Management'),
    );
  }

  /**
   * Overrides SimplenewsTestCase::setUp()
   */
  function setUp() {
    parent::setUp(array('tmgmt_ui', 'tmgmt_mygengo', 'tmgmt_mygengo_test'));

    $this->translator = tmgmt_translator_load('mygengo');

    /**
     * @var TMGMTMyGengoTranslatorPluginController $plugin
     */
    $plugin = $this->translator->getController();
    // Save implicit value for gengo_service_url to be used during tests.
    $this->translator->settings = array(
      'gengo_service_url' => $plugin->mockServiceURL,
    );
    $this->translator->save();
  }

  /**
   * Tests basic API methods of the plugin.
   */
  function testAPI() {

    $job = $this->createJob();
    $job->settings['quality'] = 'standard';
    $job->translator = $this->translator->name;
    $item = $job->addItem('test_source', 'test', '1');
    $item->data = array(
      'wrapper' => array(
        '#text' => 'Hello world',
        '#label' => 'Wrapper label',
      ),
    );
    $item->save();

    // The translator should not be available at this poitn because we didn't
    // define an API key yet.
    $this->assertFalse($job->isTranslatable());

    // Save a wrong api key.
    $this->translator->settings['api_public_key'] = 'wrong key';
    $this->translator->settings['api_private_key'] = 'wrong key';
    $this->translator->save();

    // Make sure the translator returns the correct supported target languages.
    $languages = $job->getTranslator()->getSupportedTargetLanguages('en');
    $this->assertTrue(isset($languages['de']));
    $this->assertTrue(isset($languages['es']));
    $this->assertFalse(isset($languages['it']));
    $this->assertFalse(isset($languages['en']));

    // @todo Actually check if the api key is valid.
    $this->assertTrue($job->isTranslatable());
    $job->requestTranslation();

    // Should have been rejected due to the wrong api key.
    $this->assertTrue($job->isRejected());
    $messages = $job->getMessages();
    $message = end($messages);
    $this->assertEqual('error', $message->type);
    $this->assert(strpos($message->getMessage(), 'Job has been rejected') !== FALSE,
      t('Job should be rejected as we provided wrong api key.'));

    // Save a correct api key.
    $this->translator->settings['api_public_key'] = 'correct key';
    $this->translator->settings['api_private_key'] = 'correct key';
    $this->translator->save();
    $this->assertTrue($job->isTranslatable());

    // Note that requesting translation goes with default
    // gengo_auto_approve = 1
    $job->requestTranslation();
    // And therefore the job should be active
    $this->assertTrue($job->isActive());
    foreach ($job->getItems() as $item) {
      $this->assertTrue($item->isActive());
    }

    // Create a gengo response of translated and approved job.
    $post['job'] = json_encode(tmgmt_mygengo_test_build_response_job(
      'Hello world',
      'Hallo Welt',
      'approved',
      'standard',
      implode('][', array($job->tjid, $item->tjiid, 'wrapper')),
      $item->data['wrapper']['#label']
    ));

    $action = url('tmgmt_mygengo_callback', array('absolute' => TRUE));
    $out = $this->curlExec(array(CURLOPT_URL => $action, CURLOPT_POST => TRUE, CURLOPT_POSTFIELDS => $post));

    // Response should be empty if everything went ok.
    $this->assertResponse(200);
    $this->assertTrue(empty($out));

    // Clear job item caches.
    entity_get_controller('tmgmt_job_item')->resetCache();

    // Verify the label/slug.
    $this->refreshVariables();
    $data = variable_get('tmgmt_mygengo_test_last_gengo_response', FALSE);
    // Find the key under which we can access the job received:
    $jobs = $data->jobs;
    $key = array_shift(array_keys($jobs));
    $this->assertEqual($data->jobs[$key]->slug, $item->data['wrapper']['#label']);

    // Now it should be needs review.
    foreach ($job->getItems() as $item) {
      $this->assertTrue($item->isNeedsReview());
    }
    $items = $job->getItems();
    $item = end($items);
    $data = $item->getData();
    $this->assertEqual('Hallo Welt', $data['wrapper']['#translation']['#text']);

    // Test machine translation.
    $job = $this->createJob();
    $job->settings['quality'] = 'machine';
    $job->translator = $this->translator->name;
    $job->save();
    $item = $job->addItem('test_source', 'test', '1');
    $item->data = array(
      'wrapper' => array(
        '#label' => 'Parent label',
        'subwrapper1' => array(
          '#text' => 'Hello world',
          '#label' => 'Sub label 1',
        ),
        'subwrapper2' => array(
          '#text' => 'Hello world again',
          '#label' => 'Sub label 2',
        ),
      ),
      'no_label' => array(
        '#text' => 'No label',
      ),
    );
    $item->save();

    // Machine translation should immediately go to needs review.
    $job->requestTranslation();
    foreach ($job->getItems() as $item) {
      $this->assertTrue($item->isNeedsReview());
    }
    $items = $job->getItems();
    $item = end($items);
    $data = $item->getData();
    // If received a job item with tier machine the mock service will prepend
    // mt_de_ to the source text.
    $this->assertEqual('mt_de_Hello world', $data['wrapper']['subwrapper1']['#translation']['#text']);
    $this->assertEqual('mt_de_Hello world again', $data['wrapper']['subwrapper2']['#translation']['#text']);

    // Verify generated labels/slugs.
    $this->refreshVariables();
    $data = variable_get('tmgmt_mygengo_test_last_gengo_response', FALSE);
    $jobs = $data->jobs;

    $subwrapper1_key = $job->tjid . '][' . $item->tjiid . '][wrapper][subwrapper1';
    $no_label_key = $job->tjid . '][' . $item->tjiid . '][no_label';
    $this->assertEqual($jobs[$subwrapper1_key]->slug, 'Parent label > Sub label 1');
    $this->assertEqual($jobs[$no_label_key]->slug, 'No label');
  }

  function testJobItemRejection() {

    $this->loginAsAdmin();

    // Make sure we have correct keys.
    $this->translator->settings['api_public_key'] = 'correct key';
    $this->translator->settings['api_private_key'] = 'correct key';

    $this->translator->save();

    $job = $this->createJob();
    $job->settings['quality'] = 'machine';
    $job->translator = $this->translator->name;
    $job->save();
    $item = $job->addItem('test_source', 'test', '1');
    $item->data = array(
      'wrapper' => array(
        '#label' => 'Parent label',
        'subwrapper' => array(
          '#text' => 'Hello world',
          '#label' => 'Sub label 1',
        ),
      ),
    );
    $item->save();

    $job->requestTranslation();

    $this->drupalGet('admin/config/regional/tmgmt/items/' . $item->tjiid);

    // Make sure we got the review tool with source and translation texts.
    $this->assertText('Hello world');
    $this->assertText('mt_de_Hello world');

    $this->drupalPost('admin/config/regional/tmgmt/items/' . $item->tjiid, array(), 'âœ—');

    $item_wrapper_key = 'wrapper][subwrapper';
    // Test if we have correct confirm text.
    $this->assertText(t('Confirm rejection of @data_item in @job_item', array(
      '@data_item' => $item->getData(tmgmt_ensure_keys_array($item_wrapper_key), '#label'),
      '@job_item' => $item->label(),
    )));

    // Submit current page.
    $this->drupalPost(NULL, NULL, t('Confirm'));

    $this->assertText($item->defaultLabel());

    // Navigate to the review tool and check if the data item is pending.
    $this->drupalGet('admin/config/regional/tmgmt/items/' . $item->tjiid);
    $state_icon = array_shift($this->xpath('//tr[@id="tmgmt-ui-element-wrapper-subwrapper"]/td[1]/div[@class="tmgmt-ui-state"]'));
    $this->assertEqual($state_icon->div['title'], t('Pending'));

    // Create a gengo response of translated and approved job that will be
    // sent as reviewed translation of previously rejected data item.
    $post['job'] = json_encode(tmgmt_mygengo_test_build_response_job(
      'Hello world',
      'Hallo Welt reviewed',
      'approved',
      'standard',
      implode('][', array($job->tjid, $item->tjiid, $item_wrapper_key)),
      $item->data['wrapper']['#label']
    ));

    $action = url('tmgmt_mygengo_callback', array('absolute' => TRUE));
    $out = $this->curlExec(array(CURLOPT_URL => $action, CURLOPT_POST => TRUE, CURLOPT_POSTFIELDS => $post));

    // Response should be empty if everything went ok.
    $this->assertResponse(200);
    $this->assertTrue(empty($out));

    // See if we have source and translation texts populated correctly.
    $this->drupalGet('admin/config/regional/tmgmt/items/' . $item->tjiid);
    $this->assertText('Hello world');
    $this->assertText('Hallo Welt reviewed');
  }

  function testAvailableStatus() {
    $this->loginAsAdmin();

    // Make sure we have correct keys.
    $this->translator->settings['api_public_key'] = 'correct key';
    $this->translator->settings['api_private_key'] = 'correct key';

    $this->translator->save();

    $job = $this->createJob();
    // Set quality to machine so it gets translated right away.
    $job->settings['quality'] = 'machine';
    $job->translator = $this->translator->name;
    $job->save();
    $item = $job->addItem('test_source', 'test', '1');
    $item->data = array(
      'wrapper' => array(
        '#label' => 'Parent label',
        'subwrapper' => array(
          '#text' => 'Hello world',
          '#label' => 'Sub label 1',
        ),
      ),
    );
    $item->save();

    $job->requestTranslation();

    // Make sure machine translation was received.
    entity_get_controller('tmgmt_job_item')->resetCache();
    $items = $job->getItems();
    $item = end($items);
    $data = $item->getData();
    $this->assertEqual('mt_de_Hello world', $data['wrapper']['subwrapper']['#translation']['#text']);

    // Create another job with "same source" text. The translator service will
    // return an existing translation with status available.
    $job = $this->createJob();
    // Tell the mock service to return available translation.
    $job->settings['quality'] = 'availablestandard';
    $job->translator = $this->translator->name;
    $job->save();
    $item = $job->addItem('test_source', 'test', '1');
    $item->data = array(
      'wrapper' => array(
        '#label' => 'Text label',
        '#text' => 'Lazy-Loading Some text that has been submitted and translated.',
      ),
    );
    $item->save();

    $job->requestTranslation();

    // See if available translation from gengo has updated our translation.
    entity_get_controller('tmgmt_job_item')->resetCache();
    $items = $job->getItems();
    $item = end($items);
    $data = $item->getData();
    $this->assertEqual('Translated Some text that has been submitted and translated.', $data['wrapper']['#translation']['#text']);

  }
}
