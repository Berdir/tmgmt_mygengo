<?php

/**
 * @file
 * Test cases for the MyGengo translator module.
 */

/**
 * Basic tests for the MyGengo translator.
 */
class TMGMTMyGengoTestCase extends TMGMTBaseTestCase {

  /**
   * Implements getInfo().
   */
  static function getInfo() {
    return array(
      'name' => t('MyGengo Translator tests'),
      'description' => t('Tests the MyGengo translator plugin integration.'),
      'group' => t('Translation Management'),
    );
  }

  /**
   * Overrides SimplenewsTestCase::setUp()
   */
  function setUp() {
    parent::setUp(array('tmgmt_ui', 'tmgmt_mygengo', 'tmgmt_mygengo_test'));
  }

  /**
   * Tests basic API methods of the plugin.
   */
  function testAPI() {
    $translator = $this->createTranslator();
    $translator->plugin = 'mygengo';

    /**
     * @var TMGMTMyGengoTranslatorPluginController $plugin
     */
    $plugin = $translator->getController();
    // Save implicit value for gengo_service_url to be used during tests.
    $translator->settings = array(
      'gengo_service_url' => $plugin->mockServiceURL,
    );
    $translator->save();

    $job = $this->createJob();
    $job->settings['quality'] = 'standard';
    $job->translator = $translator->name;
    $item = $job->addItem('test_source', 'test', '1');
    $item->data = array(
      'wrapper' => array(
        '#text' => 'Hello world',
        '#label' => 'Wrapper label',
      ),
    );
    $item->save();

    // The translator should not be available at this poitn because we didn't
    // define an API key yet.
    $this->assertFalse($job->isTranslatable());

    // Save a wrong api key.
    $translator->settings['api_public_key'] = 'wrong key';
    $translator->settings['api_private_key'] = 'wrong key';
    $translator->save();

    // Make sure the translator returns the correct supported target languages.
    $languages = $job->getTranslator()->getSupportedTargetLanguages('en');
    $this->assertTrue(isset($languages['de']));
    $this->assertTrue(isset($languages['es']));
    $this->assertFalse(isset($languages['it']));
    $this->assertFalse(isset($languages['en']));

    // @todo Actually check if the api key is valid.
    $this->assertTrue($job->isTranslatable());
    $job->requestTranslation();

    // Should have been rejected due to the wrong api key.
    $this->assertTrue($job->isRejected());
    $messages = $job->getMessages();
    $message = end($messages);
    $this->assertEqual('error', $message->type);
    $this->assert(strpos($message->getMessage(), 'Job has been rejected') !== FALSE,
      t('Job should be rejected as we provided wrong api key.'));

    // Save a correct api key.
    $translator->settings['api_public_key'] = 'correct key';
    $translator->settings['api_private_key'] = 'correct key';
    $translator->save();
    $this->assertTrue($job->isTranslatable());

    $job->requestTranslation();
    // Check that job is active.
    $this->assertTrue($job->isActive());
    foreach ($job->getItems() as $item) {
      $this->assertTrue($item->isActive());
    }

    // "Translate" data.
    $this->refreshVariables();
    $data = variable_get('tmgmt_mygengo_test_data', FALSE);

    $key = key($data->jobs);
    $post = array(
      'job' => json_encode(array(
        'custom_data' => $data->jobs->$key->custom_data,
        'body_src' => $data->jobs->$key->body_src,
        'body_tgt' => $data->jobs->$key->lc_tgt . '_' . $data->jobs->$key->body_src,
        'status' => 'approved',
        'tier' => 'standard',
      )),
    );
    $action = $data->jobs->$key->callback_url;
    $out = $this->curlExec(array(CURLOPT_URL => $action, CURLOPT_POST => TRUE, CURLOPT_POSTFIELDS => $post));

    // Response should be empty if everything went ok.
    $this->assertResponse(200);
    $this->assertTrue(empty($out));

    // Verify the label/slug.
    $this->assertEqual($data->jobs->$key->slug, $item->data['wrapper']['#label']);

    // Clear job item caches.
    entity_get_controller('tmgmt_job_item')->resetCache();

    // Now it should be needs review.
    foreach ($job->getItems() as $item) {
      $this->assertTrue($item->isNeedsReview());
    }
    $items = $job->getItems();
    $item = end($items);
    $data = $item->getData();
    $this->assertEqual('de_Hello world', $data['wrapper']['#translation']['#text']);

    // Test machine translation.
    $job = $this->createJob();
    $job->settings['quality'] = 'machine';
    $job->translator = $translator->name;
    $job->save();
    $item = $job->addItem('test_source', 'test', '1');
    $item->data = array(
      'wrapper' => array(
        '#label' => 'Parent label',
        'subwrapper1' => array(
          '#text' => 'Hello world',
          '#label' => 'Sub label 1',
        ),
        'subwrapper2' => array(
          '#text' => 'Hello world again',
          '#label' => 'Sub label 2',
        ),
      ),
      'no_label' => array(
        '#text' => 'No label',
      ),
    );
    $item->save();

    // Machine translation should immediately go to needs review.
    $job->requestTranslation();
    foreach ($job->getItems() as $item) {
      $this->assertTrue($item->isNeedsReview());
    }
    $items = $job->getItems();
    $item = end($items);
    $data = $item->getData();
    $this->assertEqual('mt_de_Hello world', $data['wrapper']['subwrapper1']['#translation']['#text']);
    $this->assertEqual('mt_de_Hello world again', $data['wrapper']['subwrapper2']['#translation']['#text']);

    // Verify generated labels/slugs.
    $this->refreshVariables();
    $data = variable_get('tmgmt_mygengo_test_data', FALSE);
    $subwrapper1_key = 'job' . $job->tjid . $item->tjiid . '][wrapper][subwrapper1';
    $no_label_key = 'job' . $job->tjid . $item->tjiid . '][no_label';
    $this->assertEqual($data->jobs->$subwrapper1_key->slug, 'Parent label > Sub label 1');
    $this->assertEqual($data->jobs->$no_label_key->slug, 'No label');
  }
}
