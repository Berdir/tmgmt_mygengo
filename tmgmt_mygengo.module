<?php

/**
 * @file
 * Module file of the translation management mygengo module.
 *
 * Credits:
 * Originally implemented by Ryan McGrath, myGengo. Reworked and added new
 * features by MDSystems.
 *
 * TMGMT vs myGengo jobs
 * =====================
 * TMGMT manages translation jobs which are containers for job items and those
 * are divided into data items.
 *
 * myGengo's job is at the level of TMGMGT data items. When a TMGMT job is sent
 * to myGengo all the data items are sent as grouped myGengo jobs.
 *
 * TODOs
 * =====================
 * 1) With the poll feature we added a mapping table of data items to myGengo jobs.
 * Therefore it is possible to implement regular review-reject process instead
 * of current feature which submits a completely new job to myGengo.
 *
 * 2) Do we need access check? Review possible scenarios and either remove it
 * completely or add some meaning full access control.
 */

/**
 *  Implements hook_menu().
 */
function tmgmt_mygengo_menu() {
  $items['tmgmt_mygengo_callback'] = array(
    'type' => MENU_CALLBACK,
    'title' => 'mygengo_callback',
    'description' => '',
    'page callback' => 'tmgmt_mygengo_callback',
    'access callback' => 'tmgmt_mygengo_access_check'
  );
  return $items;
}

/**
 * Implements hook_form_ID_alter().
 *
 * Adds poll action button into job checkout page.
 */
function tmgmt_mygengo_form_tmgmt_job_form_alter(&$form, &$form_state) {
  /**
   * @var TMGMTJob $job
   */
  $job = $form_state['tmgmt_job'];

  if (!empty($job) && $job->isActive() && $job->getTranslator()->getController()->pluginType() == 'mygengo') {
    $form['actions']['poll'] = array(
      '#type' => 'submit',
      '#value' => t('Poll translations'),
      '#submit' => array('_tmgmt_mygengo_poll_submit'),
      '#weight' => -10,
    );
  }
}

/**
 * Submit callback to poll translations form myGengo.
 */
function _tmgmt_mygengo_poll_submit($form, &$form_state) {
  /**
   * @var TMGMTJob $job
   */
  $job = $form_state['tmgmt_job'];
  /**
   * @var TMGMTMyGengoTranslatorPluginController $controller
   */
  $controller = $job->getTranslator()->getController();

  // Try to map jobs that have not yet been mapped.
  $controller->mapGengoJobs($job);

  // Get all available mappings.
  $gengo_mappings = $controller->getMappedGengoData($job->tjid);

  $response = NULL;
  // Get Translations for mapped data.
  if (!empty($gengo_mappings)) {
    $response = $controller->requestFromGengo($job->getTranslator(), 'translate/jobs/' . implode(',', array_keys($gengo_mappings)), 'GET');
  }

  if (!empty($response->jobs)) {
    foreach ($response->jobs as $response_job) {
      $controller->saveTranslation($job, $gengo_mappings[$response_job->job_id]->data_item_key, $response_job);
    }

    drupal_set_message(t('All available translations from myGengo have been polled.'));
  }
  else {
    drupal_set_message(t('myGengo did not provide any translations.'));
    watchdog('tmgmt_mygengo', 'Error polling translations from myGengo with response @response',
      array('@response' => var_export($response, TRUE)), WATCHDOG_WARNING);
  }
}

/**
 * Process response from mygengo.
 */
function tmgmt_mygengo_callback() {

  $data = json_decode($_POST['job']);
  $keys = explode('][', $data->custom_data);
  $tjid = array_shift($keys);

  $job = tmgmt_job_load($tjid);

  /**
   * @var TMGMTMyGengoTranslatorPluginController $mygengo
   */
  $mygengo = $job->getTranslator()->getController();
  $mygengo->saveTranslation($job, $keys, $data);
  $mygengo->mapGengoJobs($job);

  print '';
}

/**
 * tmgmt_mygengo_callback access check.
 */
function tmgmt_mygengo_access_check() {
  try {
    $job = json_decode($_POST['job']);
    // @todo Validate signature/key.
    return TRUE;
  } catch (Exception $e) {

    // Debug it for now, why not...
    watchdog('mygengo', print_r($_REQUEST, TRUE));
    return FALSE;
  }
}

/**
 * Implements hook_tmgmt_translator_plugin_info().
 */
function tmgmt_mygengo_tmgmt_translator_plugin_info() {
  return array(
    'mygengo' => array(
      'label' => t('myGengo translator'),
      'description' => t('A myGengo translator service.'),
      'plugin controller class' => 'TMGMTMyGengoTranslatorPluginController',
      'ui controller class' => 'TMGMTMyGengoTranslatorUIController',
      'default settings' => array(
        'mygengo_auto_approve' => 1,
      ),
    ),
  );
}

/**
 * Implements hook_form_ID_alter().
 *
 * Attaches javascript needed for gengo form.
 */
function tmgmt_mygengo_form_tmgmt_translator_form_alter(&$form, &$form_state) {
  /**
   * @var TMGMTTranslator $translator
   */
  $translator = $form_state['tmgmt_translator'];

  if (!empty($translator) && $translator->plugin == 'mygengo') {
    $form['#attached']['js'][] = drupal_get_path('module', 'tmgmt_mygengo') . '/js/tmgmt_mygengo.toggle_auto_approve.js';
  }
}

/**
 * Ajax callback to fetch the options provided by a translator.
 */
function tmgmt_mygengo_ajax_callback_translator_select($form, &$form_state) {
  watchdog('jo vole', var_export($form['translator_wrapper']['settings'], true));
  $form_state['rebuild'] = TRUE;
  return $form['translator_wrapper']['settings'];
}
