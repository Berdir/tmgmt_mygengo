<?php

/**
 * @file
 * Module file of the translation management mygengo module.
 *
 * Credits:
 * Originally implemented by Ryan McGrath, Gengo. Reworked and added new
 * features by MDSystems.
 *
 * TMGMT vs Gengo jobs
 * =====================
 * TMGMT manages translation jobs which are containers for job items and those
 * are divided into data items.
 *
 * myGengo's job is at the level of TMGMGT data items. When a TMGMT job is sent
 * to myGengo all the data items are sent as grouped myGengo jobs.
 *
 * TODOs
 * =====================
 * @todo With the poll feature we added a mapping table of data items to myGengo jobs.
 *   Therefore it is possible to implement regular review-reject process instead
 *   of current feature which submits a completely new job to myGengo.
 *
 * @todo Do we need access check? Review possible scenarios and either remove it
 *   completely or add some meaning full access control.
 */

define('TMGMT_MYGENGO_COMMENTS_CACHE_EXPIRE', 900);

/**
 * Ajax callback for comment form.
 */
function tmgmt_mygengo_review_form_ajax($form, &$form_state) {
  return $form['review'][$form_state['triggering_element']['#gengo_job_id'] . '_comments']['comments_wrapper'];
}

/**
 * Validates comment to be sent to gengo service.
 */
function tmgmt_mygengo_add_comment_form_validate($form, &$form_state) {
  $gengo_job_id = $form_state['triggering_element']['#gengo_job_id'];

  if (empty($form_state['values'][$gengo_job_id . '_comment'])) {
    form_set_error($gengo_job_id . '_comment', t('Comment body cannot be empty.'));
  }
}

/**
 * Submits comment to gengo service.
 */
function tmgmt_mygengo_add_comment_form_submit($form, &$form_state) {
  $form_state['rebuild'] = TRUE;
  $gengo_job_id = $form_state['triggering_element']['#gengo_job_id'];
  /* @var TMGMTJobItem $item */
  $item = $form_state['item'];
  $job = $item->getJob();
  /* @var TMGMTMyGengoTranslatorPluginController $plugin */
  $plugin = $job->getTranslatorController();

  try {
    $plugin->gengoPostComment($job->getTranslator(), $gengo_job_id, $form_state['values'][$gengo_job_id . '_comment']);
    $form_state['comment_submitted'] = 1;
  }
  catch (TMGMTException $e) {
    watchdog_exception('tmgmt_mygengo', $e);
    drupal_set_message(t('Unable to add comment.'), 'error');
  }
}

/**
 * Theme function to display comments thread.
 *
 * @param array $variables
 *   - thread: Comments thread received from gengo service.
 *
 * @return string
 *   HTML output.
 */
function theme_tmgmt_mygengo_comments_thread($variables) {
  $thread = $variables['thread'];
  $gengo_job_id = $variables['gengo_job_id'];
  if (empty($thread) || !is_array($thread)) {
    return '';
  }

  $comments = array();
  $i = 0;

  foreach ($thread as $comment) {
    $zebra = ++$i%2 == 0 ? 'even' : 'odd';

    $attributes = drupal_attributes(array('class' => array('gengo-comment-body', $zebra)));

    $comments[] = '<div class="gengo-comment-meta">' .
        t('At %time by %author:', array('%time' => format_date($comment->ctime), '%author' => $comment->author)) .
        '</div><div ' . $attributes . '>' . check_plain($comment->body) . '</div>';
  }

  return theme('item_list', array('items' => $comments)) . '<div class="comments-list-closing" id="' . $gengo_job_id . '-comments-list-closing"></div>';
}

/**
 * Implements hook_theme().
 */
function tmgmt_mygengo_theme() {
  return array(
    'tmgmt_mygengo_comments_thread' => array(
      'variables' => array('thread' => NULL, 'gegno_job_id' => NULL),
    ),
  );
}

/**
 *  Implements hook_menu().
 */
function tmgmt_mygengo_menu() {
  $items['tmgmt_mygengo_callback'] = array(
    'type' => MENU_CALLBACK,
    'title' => 'mygengo_callback',
    'description' => '',
    'page callback' => 'tmgmt_mygengo_callback',
    'access callback' => 'tmgmt_mygengo_access_check'
  );
  return $items;
}

/**
 * Submit callback to poll translations form Gengo.
 */
function _tmgmt_mygengo_poll_submit($form, &$form_state) {
  /**
   * @var TMGMTJob $job
   */
  $job = $form_state['tmgmt_job'];
  /**
   * @var TMGMTMyGengoTranslatorPluginController $controller
   */
  $controller = $job->getTranslator()->getController();

  // Try to map jobs that have not yet been mapped.
  $controller->mapGengoJobs($job);

  // Get all available mappings.
  $gengo_mappings = $controller->getMappedGengoData($job->tjid);

  $response = NULL;
  // Get Translations for mapped data.
  if (!empty($gengo_mappings)) {
    $response = $controller->requestFromGengo($job->getTranslator(), 'translate/jobs/' . implode(',', array_keys($gengo_mappings)), 'GET');
  }

  if (!empty($response->jobs)) {
    foreach ($response->jobs as $response_job) {
      $controller->saveTranslation($job, $gengo_mappings[$response_job->job_id]->data_item_key, $response_job);
    }

    drupal_set_message(t('All available translations from Gengo have been polled.'));
  }
  else {
    drupal_set_message(t('myGengo did not provide any translations.'));
    watchdog('tmgmt_mygengo', 'Error polling translations from Gengo with response @response',
      array('@response' => var_export($response, TRUE)), WATCHDOG_WARNING);
  }
}

/**
 * Process response from mygengo.
 */
function tmgmt_mygengo_callback() {

  $data = json_decode($_POST['job']);
  $keys = explode('][', $data->custom_data);
  $tjid = array_shift($keys);

  $job = tmgmt_job_load($tjid);

  /**
   * @var TMGMTMyGengoTranslatorPluginController $mygengo
   */
  $mygengo = $job->getTranslator()->getController();
  $mygengo->saveTranslation($job, $keys, $data);
  $mygengo->mapGengoJobs($job);

  print '';
}

/**
 * tmgmt_mygengo_callback access check.
 */
function tmgmt_mygengo_access_check() {
  try {
    $job = json_decode($_POST['job']);
    // @todo Validate signature/key.
    return TRUE;
  } catch (Exception $e) {

    // Debug it for now, why not...
    watchdog('mygengo', print_r($_REQUEST, TRUE));
    return FALSE;
  }
}

/**
 * Implements hook_tmgmt_translator_plugin_info().
 */
function tmgmt_mygengo_tmgmt_translator_plugin_info() {
  return array(
    'mygengo' => array(
      'label' => t('Gengo translator'),
      'description' => t('A Gengo translator service.'),
      'plugin controller class' => 'TMGMTMyGengoTranslatorPluginController',
      'ui controller class' => 'TMGMTMyGengoTranslatorUIController',
      'default settings' => array(
        'mygengo_auto_approve' => 1,
        'show_remaining_credits_info' => 1,
      ),
    ),
  );
}
