<?php

/**
 * @file
 * Module file of the translation management Gengo test module.
 */

/**
 * Implements hook_menu().
 */
function tmgmt_mygengo_test_menu() {
  $items['tmgmt_mygengo_mock/v2/translate/jobs'] = array(
    'page callback' => 'tmgmt_mygengo_test_service_translate',
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
  );
  $items['tmgmt_mygengo_mock/v2/account/balance'] = array(
    'page callback' => 'tmgmt_mygengo_test_service_account_balance',
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
  );
  $items['tmgmt_mygengo_mock/v2/translate/service/language_pairs'] = array(
    'page callback' => 'tmgmt_mygengo_test_service_get_languages',
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
  );
  return $items;
}

/**
 * Page callback account balance.
 */
function tmgmt_mygengo_test_service_account_balance() {
  $balance = new stdClass();
  $balance->credits = 25.32;
  drupal_json_output(array(
    'opstat' => 'ok',
    'response' => $balance,
  ));
}

/**
 * Page callback for getting the supported languages.
 */
function tmgmt_mygengo_test_service_get_languages() {

  $languages = array(
    'de' => array(
      'lc_tgt' => 'de',
    ),
    'en' => array(
      'lc_tgt' => 'en',
    ),
    'es' => array(
      'lc_tgt' => 'es',
    ),
  );

  // Remote source language.
  unset($languages[$_GET['lc_src']]);

  drupal_json_output(array(
    'opstat' => 'ok',
    'response' => $languages,
  ));
}

/*
 * Gengo mock service.
 */
function tmgmt_mygengo_test_service_translate() {

  tmgmt_mygengo_test_authenticate();

  $response = new stdClass();

  $sources = array();

  // Use case when jobs have been submitted to gengo.
  if (!empty($_POST['data'])) {
    $data = json_decode($_POST['data']);

    foreach ($data->jobs as $id => $job) {

      // Simulate API behavior to ignore multiple jobs with the same source.
      if (array_search($job->body_src, $sources)) {
        continue;
      }

      // Keep track of source strings.
      $sources[$id] = $job->body_src;

      // Machine translation - simulate returning translation job right away.
      if ($job->tier == 'machine') {
        $body_tgt = 'mt_de_' . $job->body_src;
        $response->jobs[$id] = tmgmt_mygengo_test_build_response_job($job->body_src, $body_tgt, 'approved', $job->tier, $job->custom_data, $job->slug);
      }
      // Hack to tell mock service that translation should be returned right
      // away as available.
      elseif (strpos($job->body_src, 'Lazy-Loading') !== FALSE) {
        $body_tgt = str_replace('Lazy-Loading', 'Translated', $job->body_src);
        $response->jobs[$id] = tmgmt_mygengo_test_build_response_job($job->body_src, $body_tgt, 'available', $job->tier, $job->custom_data, $job->slug);
      }
      // Otherwise we have submitted a job, however just return the job object
      // without translation and in pending state.
      else {
        $response->jobs[$id] = tmgmt_mygengo_test_build_response_job($job->body_src, NULL, 'pending', $job->tier, $job->custom_data, $job->slug);
      }
    }

    // Save the response so that it can be further examined.
    variable_set('tmgmt_mygengo_test_last_gengo_response', $response);
  }

  // TODO - to fix tests I believe this has to be changed in some cases. Just
  // return the $response not the structure.
  drupal_json_output(array(
    'opstat' => 'ok',
    'response' => $response,
  ));
}

/**
 * Helper function to build gengo job.
 */
function tmgmt_mygengo_test_build_response_job($body_src, $body_tgt, $status, $tier, $custom_data, $slug) {

  $job = new stdClass();
  $job->lc_src = 'en';
  $job->lc_tgt = 'de';
  $job->body_src = $body_src;
  $job->unit_count = str_word_count($job->body_src);
  // Fake credit calculation.
  $job->credits = $job->unit_count * .4;
  $job->status = $status;
  $job->tier = $tier;
  $job->custom_data = $custom_data;
  $job->slug = $slug;
  $job->job_id = rand(1, 100);
  $job->status = NULL;

  if (!empty($body_tgt)) {
    $job->status = 'approved';
  }

  // Add translation if available.
  if (!empty($body_tgt)) {
    $job->body_tgt = $body_tgt;
  }

  return $job;
}

/**
 * Helper function to run authentication.
 */
function tmgmt_mygengo_test_authenticate() {

  if ($_REQUEST['api_key'] == 'correct key') {
    $sig = hash_hmac('sha1', $_REQUEST['ts'], 'correct key');
    if ($sig == $_REQUEST['api_sig']) {
      return;
    }
  }

  drupal_json_output(array(
    'opstat' => 'failure',
    // We do not really need a response here.
    'response' => '',
    'err' => array(array((object)array('msg' => 'Authentication failure', 'code' => 100))),
  ));

  // In case of error we do not want to continue.
  drupal_exit();
}
